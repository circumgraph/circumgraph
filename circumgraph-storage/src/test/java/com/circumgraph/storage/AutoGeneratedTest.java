package com.circumgraph.storage;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.is;
import static org.hamcrest.Matchers.not;
import static org.junit.jupiter.api.Assertions.assertThrows;

import java.util.Optional;

import com.circumgraph.model.DirectiveUse;
import com.circumgraph.model.FieldDef;
import com.circumgraph.model.NonNullDef;
import com.circumgraph.model.ObjectDef;
import com.circumgraph.model.ScalarDef;
import com.circumgraph.model.Schema;
import com.circumgraph.model.StructuredDef;
import com.circumgraph.model.validation.ValidationMessageLevel;
import com.circumgraph.storage.mutation.ScalarValueMutation;
import com.circumgraph.storage.mutation.StructuredMutation;

import org.junit.jupiter.api.Test;

public class AutoGeneratedTest
	extends StorageTest
{
	@Test
	public void testGenerate()
	{
		var storage = open(Schema.create()
			.addType(ObjectDef.create("Test")
				.addImplements(StorageSchema.ENTITY_NAME)
				.addField(FieldDef.create("value")
					.withType(ScalarDef.ID)
					.addDirective(DirectiveUse.create("autoGenerated")
						.addArgument("provider", "ID")
						.build()
					)
					.build()
				)
				.build()
			)
			.build()
		);

		var collection = storage.get("Test");

		var mutation = collection.newMutation()
			.build();

		var stored = collection.store(mutation).block();

		var id = stored.getId();
		var fetched = collection.get(id).block();

		var fetchedValue = fetched.getField("value", SimpleValue.class);
		assertThat(fetchedValue, not(Optional.empty()));

		var storedValue = stored.getField("value", SimpleValue.class).get();
		assertThat(fetchedValue.get().get(), is(storedValue.get()));
	}

	@Test
	public void testGenerateSubObject()
	{
		var storage = open(Schema.create()
			.addType(ObjectDef.create("Test")
				.addImplements(StorageSchema.ENTITY_NAME)
				.addField(FieldDef.create("value")
					.withType(NonNullDef.output("Sub"))
					.build()
				)
				.build()
			)
			.addType(ObjectDef.create("Sub")
				.addField(FieldDef.create("value")
					.withType(ScalarDef.ID)
					.addDirective(DirectiveUse.create("autoGenerated")
						.addArgument("provider", "ID")
						.build()
					)
					.addDirective(DirectiveUse.create("regenerate")
						.build()
					)
					.build()
				)
				.build()
			)
			.build()
		);

		var collection = storage.get("Test");

		var subType = storage.getModel().get("Sub", StructuredDef.class).get();
		var stored = collection.store(collection.newMutation()
			.updateField("value", StructuredMutation.create(subType)
				.build()
			)
			.build()
		).block();

		var storedValue = stored.getField("value", StructuredValue.class)
			.get()
			.getField("value", SimpleValue.class)
			.get();

		var id = stored.getId();
		var fetched = collection.get(id).block();

		var fetchedValue = fetched.getField("value", StructuredValue.class)
			.get()
			.getField("value", SimpleValue.class)
			.get();

		assertThat(fetchedValue.get(), is(storedValue.get()));
	}

	@Test
	public void testInitialDisallowed()
	{
		var storage = open(Schema.create()
			.addType(ObjectDef.create("Test")
				.addImplements(StorageSchema.ENTITY_NAME)
				.addField(FieldDef.create("value")
					.withType(ScalarDef.ID)
					.addDirective(DirectiveUse.create("autoGenerated")
						.addArgument("provider", "ID")
						.build()
					)
					.build()
				)
				.build()
			)
			.build()
		);

		var collection = storage.get("Test");

		var e = assertThrows(StorageValidationException.class, () -> {
			var mutation = collection.newMutation()
				.updateField("value", ScalarValueMutation.create(ScalarDef.ID, "abc"))
				.build();

			collection.store(mutation).block();
		});

		var msg = e.getIssues().getFirst();
		assertThat(msg.getLevel(), is(ValidationMessageLevel.ERROR));
		assertThat(msg.getCode(), is("storage:mutation:read-only"));
		assertThat(msg.getLocation().describe(), is("value"));
	}

	@Test
	public void testUpdateDoesNotRegenerate()
	{
		var storage = open(Schema.create()
			.addType(ObjectDef.create("Test")
				.addImplements(StorageSchema.ENTITY_NAME)
				.addField(FieldDef.create("value")
					.withType(ScalarDef.ID)
					.addDirective(DirectiveUse.create("autoGenerated")
						.addArgument("provider", "ID")
						.build()
					)
					.build()
				)
				.build()
			)
			.build()
		);

		var collection = storage.get("Test");

		var stored1 = collection.store(collection.newMutation()
			.build()
		).block();

		var id = stored1.getId();
		var stored1Value = stored1.getField("value", SimpleValue.class).get();

		var fetched1 = collection.get(id).block();
		var fetched1Value = fetched1.getField("value", SimpleValue.class);
		assertThat(fetched1Value, not(Optional.empty()));
		assertThat(fetched1Value.get().get(), is(stored1Value.get()));

		var stored2 = collection.store(id, collection.newMutation()
			.build()
		).block();

		var stored2Value = stored2.getField("value", SimpleValue.class).get();
		assertThat(stored2Value.get(), is(stored1Value.get()));
	}

	@Test
	public void testRegenerateDirect()
	{
		var storage = open(Schema.create()
			.addType(ObjectDef.create("Test")
				.addImplements(StorageSchema.ENTITY_NAME)
				.addField(FieldDef.create("value")
					.withType(ScalarDef.ID)
					.addDirective(DirectiveUse.create("autoGenerated")
						.addArgument("provider", "ID")
						.build()
					)
					.addDirective(DirectiveUse.create("regenerate")
						.build()
					)
					.build()
				)
				.build()
			)
			.build()
		);

		var collection = storage.get("Test");

		var stored1 = collection.store(collection.newMutation()
			.build()
		).block();

		var id = stored1.getId();
		var stored1Value = stored1.getField("value", SimpleValue.class).get();

		var fetched1 = collection.get(id).block();
		var fetched1Value = fetched1.getField("value", SimpleValue.class);
		assertThat(fetched1Value, not(Optional.empty()));
		assertThat(fetched1Value.get().get(), is(stored1Value.get()));

		var stored2 = collection.store(id, collection.newMutation()
			.build()
		).block();

		var stored2Value = stored2.getField("value", SimpleValue.class).get();
		assertThat(stored2Value.get(), not(stored1Value.get()));
	}

	@Test
	public void testRegenerateSubObject()
	{
		var storage = open(Schema.create()
			.addType(ObjectDef.create("Test")
				.addImplements(StorageSchema.ENTITY_NAME)
				.addField(FieldDef.create("value")
					.withType(NonNullDef.output("Sub"))
					.addDirective(DirectiveUse.create("regenerate")
						.build()
					)
					.build()
				)
				.build()
			)
			.addType(ObjectDef.create("Sub")
				.addField(FieldDef.create("value")
					.withType(ScalarDef.ID)
					.addDirective(DirectiveUse.create("autoGenerated")
						.addArgument("provider", "ID")
						.build()
					)
					.addDirective(DirectiveUse.create("regenerate")
						.build()
					)
					.build()
				)
				.build()
			)
			.build()
		);

		var collection = storage.get("Test");

		var subType = storage.getModel().get("Sub", StructuredDef.class).get();
		var stored1 = collection.store(collection.newMutation()
			.updateField("value", StructuredMutation.create(subType)
				.build()
			)
			.build()
		).block();

		var id = stored1.getId();
		var stored1Value = stored1.getField("value", StructuredValue.class)
			.get()
			.getField("value", SimpleValue.class)
			.get();

		var fetched1 = collection.get(id).block();

		var fetched1Value = fetched1.getField("value", StructuredValue.class)
			.get()
			.getField("value", SimpleValue.class)
			.get();

		assertThat(fetched1Value.get(), is(stored1Value.get()));

		var stored2 = collection.store(id, collection.newMutation()
			.build()
		).block();

		var stored2Value = stored2.getField("value", StructuredValue.class)
			.get()
			.getField("value", SimpleValue.class)
			.get();

		assertThat(stored2Value.get(), not(fetched1Value.get()));
	}

	@Test
	public void testRegenerateSubObjectSkipped()
	{
		var storage = open(Schema.create()
			.addType(ObjectDef.create("Test")
				.addImplements(StorageSchema.ENTITY_NAME)
				.addField(FieldDef.create("value")
					.withType(NonNullDef.output("Sub"))
					.build()
				)
				.build()
			)
			.addType(ObjectDef.create("Sub")
				.addField(FieldDef.create("value")
					.withType(ScalarDef.ID)
					.addDirective(DirectiveUse.create("autoGenerated")
						.addArgument("provider", "ID")
						.build()
					)
					.addDirective(DirectiveUse.create("regenerate")
						.build()
					)
					.build()
				)
				.build()
			)
			.build()
		);

		var collection = storage.get("Test");

		var subType = storage.getModel().get("Sub", StructuredDef.class).get();
		var stored1 = collection.store(collection.newMutation()
			.updateField("value", StructuredMutation.create(subType)
				.build()
			)
			.build()
		).block();

		var id = stored1.getId();
		var stored1Value = stored1.getField("value", StructuredValue.class)
			.get()
			.getField("value", SimpleValue.class)
			.get();

		var fetched1 = collection.get(id).block();

		var fetched1Value = fetched1.getField("value", StructuredValue.class)
			.get()
			.getField("value", SimpleValue.class)
			.get();

		assertThat(fetched1Value.get(), is(stored1Value.get()));

		var stored2 = collection.store(id, collection.newMutation()
			.build()
		).block();

		var stored2Value = stored2.getField("value", StructuredValue.class)
			.get()
			.getField("value", SimpleValue.class)
			.get();

		assertThat(stored2Value.get(), is(fetched1Value.get()));
	}
}
