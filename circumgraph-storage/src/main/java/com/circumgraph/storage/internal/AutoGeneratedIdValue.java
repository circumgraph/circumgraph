package com.circumgraph.storage.internal;

import java.util.Objects;

import com.circumgraph.model.ScalarDef;
import com.circumgraph.model.SimpleValueDef;
import com.circumgraph.storage.SimpleValue;
import com.circumgraph.storage.scalars.ScalarConversionException;

public class AutoGeneratedIdValue
	implements SimpleValue
{
	private final long value;

	public AutoGeneratedIdValue(long value)
	{
		this.value = value;
	}

	@Override
	public SimpleValueDef getDefinition()
	{
		return ScalarDef.ID;
	}

	@Override
	public Object get()
	{
		return AutoGeneratedIds.encode(value);
	}

	@Override
	public String asString()
	{
		return AutoGeneratedIds.encode(value);
	}

	@Override
	public int asInt()
	{
		throw new ScalarConversionException("IDs can not be used as ints");
	}

	@Override
	public double asFloat()
	{
		throw new ScalarConversionException("IDs can not be used as floats");
	}

	@Override
	public boolean asBoolean()
	{
		throw new ScalarConversionException("IDs can not be used as booleans");
	}

	@Override
	public long asID()
	{
		return value;
	}

	@Override
	public <T> T as(Class<T> type)
	{
		return type.cast(value);
	}

	@Override
	public int hashCode()
	{
		return Objects.hash(value);
	}

	@Override
	public boolean equals(Object obj)
	{
		if(this == obj) return true;
		if(obj == null) return false;
		if(getClass() != obj.getClass()) return false;
		AutoGeneratedIdValue other = (AutoGeneratedIdValue) obj;
		return other.value == value;
	}

	@Override
	public String toString()
	{
		return "AutoGeneratedIdValue{value=" + value + "}";
	}
}
